class Solution {
    int [][] directions = {{1,0},{-1,0},{0,1},{0,-1}};
    int r;
    int c;
    public boolean exist(char[][] board, String word) {
         r = board.length;
         c = board[0].length;
        int idx = 0;
        for(int i = 0;i<r;i++){
            for(int j = 0;j<c;j++){
                if(board[i][j] == word.charAt(0) && backtrack(board,i,j,word,idx))
                return true;
            }
        }
        return false;
    }

    boolean backtrack(char[][] board,int i ,int j, String word,int idx){
        if(idx == word.length()) return true;
        if(i<0 || j<0 ||i>=r || j>=c || board[i][j]=='$') return false;
        if(board[i][j]!=word.charAt(idx)) return false;

        char temp = board[i][j];
        board[i][j] = '$';

        for(int[] dir: directions){
            int i_new = i+dir[0];
            int j_new = j+dir[1];

            if(backtrack(board,i_new,j_new,word,idx+1)){
                return true;
            }
        }
        board[i][j] = temp;
        return false;
    }
}
